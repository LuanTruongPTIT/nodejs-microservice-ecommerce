version: "3.8"
services:
  mongo1:
    container_name: mongo1
    image: mongo
    ports:
      - 27023:27017 
    restart: always
    command: mongod --replSet "rs0"
    volumes:
      - ./mongodb/mongo1/:/app/data/db
    environment:
      - MONGO_INITDB_REPLICASET=rs0
    networks:
      - mongo-replica
  mongo2:
    container_name: mongo2
    image: mongo
    
    ports:
      - 27020:27017
    restart: always
    command: mongod --replSet "rs0"
    volumes:
      - ./mongodb/mongo2/:/app/data/db
    environment:
      - MONGO_INITDB_REPLICASET=rs0
    networks:
      - mongo-replica
  mongo3:
    container_name: mongo3
    image: mongo
   
    ports:
      - 27021:27017
    restart: always
    command: mongod --replSet "rs0"
    volumes:
      - ./mongodb/mongo3/:/app/data/db
    environment:
      - MONGO_INITDB_REPLICASET=rs0
    networks:
      - mongo-replica
  mongo4:
    container_name: mongo4
    image: mongo
    ports:
      - 27024:27017 
    restart: always
    command: mongod --replSet "rs1"
    volumes:
      - ./mongodb/mongo4/:/app/data/db
    environment:
      - MONGO_INITDB_REPLICASET=rs1
    networks:
      - mongo-replica1
  mongo5:
    container_name: mongo5
    image: mongo
    
    ports:
      - 27025:27017
    restart: always
    command: mongod --replSet "rs1"
    volumes:
      - ./mongodb/mongo5/:/app/data/db
    environment:
      - MONGO_INITDB_REPLICASET=rs1
    networks:
      - mongo-replica1
  mongo6:
    container_name: mongo6
    image: mongo
   
    ports:
      - 27026:27017
    restart: always
    command: mongod --replSet "rs1"
    volumes:
      - ./mongodb/mongo6/:/app/data/db
    environment:
      - MONGO_INITDB_REPLICASET=rs1
    networks:
      - mongo-replica1
# finally, we can define the initialization server
# this runs the `rs.initiate` command to intialize
# the replica set and connect the three servers to each other
       
  redis:
    container_name: redis_1
    # image: redis
    image: redislabs/redismod:latest
    ports:
     - "6379:6379"
    # networks:
    #   - my-network
    # volumes:
    #  - ./redis-service/config/redis.conf:/redis.conf 
  redisinsight:
    image: redislabs/redisinsight
    ports:
      - '8001:8001'
    # networks:
    #   - my-network
  rabbitmq:
    image: rabbitmq:3.10-rc-management-alpine
    ports:
      # AMQP protocol port
      - "5672:5672"
      # HTTP management UI
      - "15672:15672"
  products:
    build:
      dockerfile: Dockerfile
      context: ./products
    container_name: products 
    ports:
      - "8002:8002"
    restart: always
    depends_on:         
      - "mongo1"
      - "rabbitmq"
    volumes:
      - .:/app 
      - /app/products/node_modules 
    
    env_file:
      - ./products/.env.dev
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
  shopping:
    build:
      dockerfile: Dockerfile 
      context: ./shopping 
    container_name: shopping
    ports:
      - "8003:8003"
    restart: always
    # depends_on:
    #   - "mongo3"
    volumes:
      - .:/app 
      - /app/shopping/node_modules 
    env_file:
      - ./shopping/.env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
  customer:
    build:
      dockerfile: Dockerfile
      context: ./customer 
    container_name: customer
    ports:
      - "8007:8007" 
    restart: always
    depends_on:
      # - "mongo1" 
      - "redis"
      - "rabbitmq"
    volumes:
      - "./customer:/app/customer" 
      # - /app/customer/node_modules
    # networks:
    #   - my-network
    env_file:
      - ./customer/.env.dev
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    
  nginx-proxy:
    build:
      dockerfile: Dockerfile
      context: ./proxy
    depends_on:
      - products
      - shopping
      - customer
    ports:
      - 80:80
networks:
  mongo-replica:
   driver: bridge
  mongo-replica1:
   driver: bridge